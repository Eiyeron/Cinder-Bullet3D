"precision mediump float;\n"
"\n"
"varying vec4 vPosition;\n"
"varying vec3 vNormal;\n"
"varying vec4 vColor;\n"
"\n"
"void main(void) {\n"
"	// set diffuse and specular colors\n"
"	vec3 cDiffuse = vColor.rgb;\n"
"	vec3 cSpecular = vec3(0.3, 0.3, 0.3);\n"
"\n"
"	// light properties in view space\n"
"	vec3 vLightPosition = vec3(0.0, 0.0, 0.0);\n"
"\n"
"	// lighting calculations\n"
"	vec3 vVertex = vPosition.xyz;\n"
"	vec3 vNormal = normalize( vNormal );\n"
"	vec3 vToLight = normalize( vLightPosition - vVertex );\n"
"	vec3 vToEye = normalize( -vVertex );\n"
"	vec3 vReflect = normalize( -reflect(vToLight, vNormal) );\n"
"\n"
"	// diffuse coefficient\n"
"	vec3 diffuse = max( dot( vNormal, vToLight ), 0.0 ) * cDiffuse;\n"
"\n"
"	// specular coefficient with energy conservation\n"
"	const float shininess = 20.0;\n"
"	const float coeff = (2.0 + shininess) / (2.0 * 3.14159265);\n"
"	vec3 specular = pow( max( dot( vReflect, vToEye ), 0.0 ), shininess ) * coeff * cSpecular;\n"
"\n"
"	// to conserve energy, diffuse and specular colors should not exceed one\n"
"	float maxDiffuse = max(diffuse.r, max(diffuse.g, diffuse.b));\n"
"	float maxSpecular = max(specular.r, max(specular.g, specular.b));\n"
"	float fConserve = 1.0 / max(1.0, maxDiffuse + maxSpecular);\n"
"\n"
"	// final color\n"
"	gl_FragColor.rgb = (diffuse + specular) * fConserve;\n"
"	gl_FragColor.a = 1.0;\n"
"}\n"
